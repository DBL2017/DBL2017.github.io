<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenWrt on 生如夏花</title><link>https://DBL2017.github.io/series/openwrt/</link><description>Recent content in OpenWrt on 生如夏花</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 26 Dec 2024 09:12:52 +0800</lastBuildDate><atom:link href="https://DBL2017.github.io/series/openwrt/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenWrt下载编译以及在VMWare上运行</title><link>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/openwrt%E4%B8%8B%E8%BD%BD%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E5%9C%A8vmware%E4%B8%8A%E8%BF%90%E8%A1%8C/</link><pubDate>Thu, 21 Nov 2024 23:11:53 +0800</pubDate><guid>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/openwrt%E4%B8%8B%E8%BD%BD%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E5%9C%A8vmware%E4%B8%8A%E8%BF%90%E8%A1%8C/</guid><description>本文描述了OpenWrt源码下载、编译过程以及产物，并在VMWare上运行配置IP，并远程连接到OpenWrt系统中。</description><tags>OpenWrt</tags><summary>&lt;p>本文记录以下OpenWrt的入门知识，包括源码编译，&lt;code>make menuconfig&lt;/code>配置，&lt;code>feeds&lt;/code>包下载以及生成可以运行在VMWare上的镜像。&lt;/p>
&lt;p>然后在VMWare上运行，并配置静态IP，然后可以使用SSH工具远程连接到OpenWrt系统中。&lt;/p></summary></item><item><title>ubus接口调用解析时遇到的一点问题</title><link>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/ubus%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E8%A7%A3%E6%9E%90%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 07 Aug 2021 22:06:38 +0800</pubDate><guid>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/ubus%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E8%A7%A3%E6%9E%90%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%AE%E9%A2%98/</guid><description/><tags>OpenWrt Ubus BLOBMSG_TYPE_TABLE TABLE_TYPE_ARRAY BLOBMSG_TYPE_INT32 BLOBMSG_TYPE_INT64</tags><summary>&lt;p>本文主要描述在openwrt环境下，使用&lt;code>blobmsg_parse&lt;/code>接口解析双层&lt;code>BLOBMSG_TYPE_TABLE&lt;/code>出现的Segmentation fault问题。带解析的数据来源于&lt;code>ubus call system info&lt;/code>返回的值。&lt;/p></summary></item><item><title>OpenWrt之Feeds</title><link>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/openwrt%E4%B9%8Bfeeds/</link><pubDate>Thu, 21 Nov 2024 22:38:01 +0800</pubDate><guid>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/openwrt%E4%B9%8Bfeeds/</guid><description>Feed是OpenWRT中的软件包集合，这些软件包可以使用一个统一的地址来获取。软件包可以分布在远程服务器、版本控制系统、本地文件系统以及其他可以通过feed方法使用单个名称（路径/URL）寻址的位置。这样用户可以不必关心软件包的存储位置，减少软件包与核心代码的耦合。</description><tags>OpenWrt Feeds</tags><summary>&lt;p>Feeds在OpenWrt中扮演着至关重要的角色，它们允许用户根据自己的需求定制和扩展路由器的功能。通过安装不同的Feed，用户可以添加新的软件包、更新现有软件包或删除不再需要的软件包。&lt;/p></summary></item><item><title>UCI system</title><link>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/uci/uci-system/</link><pubDate>Thu, 03 Aug 2023 22:38:57 +0800</pubDate><guid>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/uci/uci-system/</guid><description/><tags>OpenWrt UCI Config Section Option Libuci</tags><summary>&lt;p>UCI，Unified Configuration Interface，统一配置接口，是一个集中配置OpenWrt服务的系统。&lt;/p>
&lt;p>UCI是OpenWrt中基于NVRAM配置的继承者，是OpenWrt主要系统功能配置的用户接口，包括网络、无线、日志以及远程访问等等。&lt;/p></summary></item><item><title>OpenWrt之uci.sh中uci_load的工作原理</title><link>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/uci/openwrt%E4%B9%8Buci.sh%E4%B8%ADuci_load%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link><pubDate>Wed, 25 Dec 2024 09:29:50 +0800</pubDate><guid>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/uci/openwrt%E4%B9%8Buci.sh%E4%B8%ADuci_load%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid><description>OpenWrt在`/lib/functions.sh`和`/lib/config/uci.sh`脚本中提供了操作UCI配置的校准接口，可以在Shell脚本中操作UCI配置。这样就可以在启动脚本中来根据UCI配置来进行选择启动。</description><tags>UCI OpenWrt Uci.sh Uci_load Config_cb Option_cb List_cb</tags><summary>&lt;p>OpenWrt在&lt;code>/lib/functions.sh&lt;/code>和&lt;code>/lib/config/uci.sh&lt;/code>提供了一组标准的shell接口来操作UCI配置，这样可以在Shell脚本中处理UCI配置。尤其是在&lt;code>/etc/init.d&lt;/code>目录下的配置文件中。&lt;/p>
&lt;p>本文主要探索&lt;code>/lib/config/uci.sh&lt;/code>脚本中的&lt;code>uci_load&lt;/code>接口是如何将UCI配置加载到内存中的。&lt;/p></summary></item><item><title>OpenWrt之shell脚本处理UCI配置</title><link>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/uci/openwrt%E4%B9%8Bshell%E8%84%9A%E6%9C%AC%E5%A4%84%E7%90%86uci%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 26 Dec 2024 09:12:52 +0800</pubDate><guid>https://DBL2017.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openwrt/uci/openwrt%E4%B9%8Bshell%E8%84%9A%E6%9C%AC%E5%A4%84%E7%90%86uci%E9%85%8D%E7%BD%AE/</guid><description>OpenWRT在`/lib/functions.sh`中提供了一些列shell标准接口（`config_load, config_get, config_get_bool, config_cb, option_cb, list_cb, config_foreach, config_list_foreach`），以便在shell脚本中高效地读取和处理uci配置。当然这主要用于在`/etc/init.d`中写启动脚本。</description><tags>UCI OpenWrt Config_load Config_cb Option_cb List_cb</tags><summary>&lt;p>OpenWRT提供了一些列shell标准接口（&lt;code>config_load, config_get, config_get_bool, config_cb, option_cb, list_cb, config_foreach, config_list_foreach&lt;/code>，以便在shell脚本中高效地读取和处理uci配置。&lt;/p>
&lt;p>这主要用于在&lt;code>/etc/init.d&lt;/code>中写启动脚本。&lt;/p>
&lt;p>OpenWRT在&lt;code>/lib/functions.sh&lt;/code>文件中提供了访问uci配置的shell接口，因此在使用这些接口之间需要直接或间接（包含&lt;code>rc.common&lt;/code>）的方式包含该文件。&lt;/p></summary></item></channel></rss>