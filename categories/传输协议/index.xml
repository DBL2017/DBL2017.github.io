<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>传输协议 on 生如夏花</title><link>https://DBL2017.github.io/categories/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/</link><description>Recent content in 传输协议 on 生如夏花</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 21 May 2025 14:28:31 +0800</lastBuildDate><atom:link href="https://DBL2017.github.io/categories/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>dibbler-server的DHCPv6-PD如何分配56位前缀</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/dibbler-server%E7%9A%84dhcpv6-pd%E5%A6%82%E4%BD%95%E5%88%86%E9%85%8D56%E4%BD%8D%E5%89%8D%E7%BC%80/</link><pubDate>Wed, 21 May 2025 14:28:31 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/dibbler-server%E7%9A%84dhcpv6-pd%E5%A6%82%E4%BD%95%E5%88%86%E9%85%8D56%E4%BD%8D%E5%89%8D%E7%BC%80/</guid><description>dibbler-server支持IPv6地址分配、前缀委派等，本文总结了在前缀委派时需要的配置和可能出现的错误。</description><tags>传输协议 IPv6 Dibbler-Server DHCPv6 PD</tags><summary>&lt;p>&lt;code>dibbler-server&lt;/code>是一个实现DHCPv6的应用层软件，用于给客户端提供IPv6地址分配。&lt;/p>
&lt;p>&lt;code>dibbler-server&lt;/code>支持IPv6地址分配、前缀委派等，本文总结了在前缀委派时需要的配置和可能出现的错误。&lt;/p></summary></item><item><title>IPIP隧道创建实例</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/ipv6%E8%BF%87%E6%B8%A1%E6%8A%80%E6%9C%AF/ipip%E9%9A%A7%E9%81%93%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B/</link><pubDate>Thu, 15 May 2025 16:51:54 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/ipv6%E8%BF%87%E6%B8%A1%E6%8A%80%E6%9C%AF/ipip%E9%9A%A7%E9%81%93%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B/</guid><description>本实例中通过在两台通过VMWare NAT DHCP连通的虚拟机之间创建ipip6隧道实现通信。</description><tags>传输协议 IPv6 隧道技术 IPIP</tags><summary>&lt;p>本实例中通过在两台VMWare虚拟机之间创建ipip6隧道，实现IPv4 over IPv6通信。&lt;/p>
&lt;p>两台VMWare虚拟机通过NAT DHCP服务器连通，并手动配置静态IPv6地址。&lt;/p></summary></item><item><title>TCP之MSS字段备注</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%B1%82/tcp%E4%B9%8Bmss%E5%AD%97%E6%AE%B5%E5%A4%87%E6%B3%A8/</link><pubDate>Mon, 12 May 2025 15:11:48 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%B1%82/tcp%E4%B9%8Bmss%E5%AD%97%E6%AE%B5%E5%A4%87%E6%B3%A8/</guid><description>调整TCP参数MSS字段，来设置在TCP层分片而非IP层。当TCP负载大小不超过TCP的MSS字段值但其加上TCP头、IP头之后超过链路层MTU时，就会触发IP层分片。正常TCP的MSS字段值为MTU-IPv4头-TCP头=1500-20-20=1460字节或MTU-IPv6头-TCP头=1500-40-20=1440字节。当时当遇到IPIP协议（例如IPv4 over IPv6），此时TCP的MSS字段如果仍旧为1460或1440字节时，就会触发IP层分片，此时应设置为MTU-IPv6头-IPv4头-TCP头=1500-40-20-20=1420字节。</description><tags>传输协议 TCP MSS</tags><summary>&lt;p>调整TCP参数MSS字段，来设置在TCP层分片而非IP层。&lt;/p>
&lt;p>当TCP负载大小不超过TCP的MSS字段值但其加上TCP头、IP头之后超过链路层MTU时，就会触发IP层分片。&lt;/p>
&lt;p>正常TCP的MSS字段值为MTU-IPv4头-TCP头=1500-20-20=1460字节或MTU-IPv6头-TCP头=1500-40-20=1440字节。&lt;/p>
&lt;p>当遇到IPIP协议（例如IPv4 over IPv6），此时TCP的MSS字段如果仍旧为1460或1440字节时，就会触发IP层分片（TCP层为查过MSS字段值不会触发分片，IP层超过1500字节触发分片），此时应设置为MTU-IPv6头-IPv4头-TCP头=1500-40-20-20=1420字节。&lt;/p></summary></item><item><title>EVE-NG环境搭建</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/eve-ng/eve-ng%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 21 Apr 2025 21:42:02 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/eve-ng/eve-ng%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>EVE-NG （Emulated Virtual Environment - Next Generation）是一款基于B/S架构的多厂商网络仿真平台，主要用于构建虚拟化网络实验环境。</description><tags>传输协议</tags><summary>&lt;p>EVE-NG （Emulated Virtual Environment - Next Generation）是一款基于B/S架构的多厂商网络仿真平台，主要用于构建虚拟化网络实验环境。&lt;/p></summary></item><item><title>NS-3环境搭建</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/ns-3/ns-3%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Wed, 16 Apr 2025 11:28:09 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/ns-3/ns-3%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>本文主要参考NS-3的官方安装指引进行编译安装NS-3.44。</description><tags>传输协议 网络仿真 NS-3</tags><summary>&lt;p>本文主要参考NS-3的官方参考教程搭建NS-3网络仿真工具。&lt;/p>
&lt;p>主要包括两个方面：&lt;/p>
&lt;ol>
&lt;li>下载源码&lt;/li>
&lt;li>编译并执行示例和测试程序。&lt;/li>
&lt;/ol></summary></item><item><title>扩展唯一标识符（EUI）、组织唯一标识符（OUI）和公司ID（CID）的使用指南</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/%E6%89%A9%E5%B1%95%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6eui%E7%BB%84%E7%BB%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6oui%E5%92%8C%E5%85%AC%E5%8F%B8idcid%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 27 Dec 2024 09:59:42 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/%E6%89%A9%E5%B1%95%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6eui%E7%BB%84%E7%BB%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6oui%E5%92%8C%E5%85%AC%E5%8F%B8idcid%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid><description/><tags>传输协议 IPv6 EUI OUI CID EUI64</tags><summary>&lt;p>本教程涵盖了由IEEE注册机构（IEEE RA）分配的&lt;strong>组织标识符&lt;/strong>以及基于它们的&lt;strong>扩展标识符&lt;/strong>。&lt;/p>
&lt;p>它涵盖了与受让人和标准开发人员相关的标识符格式、分配、指导方针和政策。&lt;/p>
&lt;p>本教程包括与组织标识符（如组织唯一标识符（OUI）和公司ID（CID））和扩展标识符（如扩展唯一标识符（EUI）和扩展本地标识符（ELI））相关的信息。&lt;/p></summary></item><item><title>modbus-tcp读取示例</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/modbus/modbus-tcp%E8%AF%BB%E5%8F%96%E7%A4%BA%E4%BE%8B/</link><pubDate>Sun, 12 May 2024 21:23:52 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/modbus/modbus-tcp%E8%AF%BB%E5%8F%96%E7%A4%BA%E4%BE%8B/</guid><description>modbus modbus-tcp，线圈，寄存器，输入寄存器，输出寄存器，功能码</description><tags>传输协议 Modbus Modbus-Tcp</tags><summary>&lt;p>本节主要记录一下学习modbus的编程实践，给出了一个读取modbus数据的示例。&lt;/p>
&lt;p>数据提供源是Win上的Modbus Slave软件。&lt;/p>
&lt;p>依赖库是&lt;code>libmodbus&lt;/code>。&lt;/p></summary></item><item><title>MQTT保活机制</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E4%BF%9D%E6%B4%BB%E6%9C%BA%E5%88%B6/</link><pubDate>Wed, 26 Jul 2023 23:40:23 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E4%BF%9D%E6%B4%BB%E6%9C%BA%E5%88%B6/</guid><description/><tags>传输协议 MQTT KeepAlive 保活 PINGREQ PINGRESP 保持活动时间</tags><summary>&lt;p>MQTT保持活动机制是MQTT协议定义的一项功能。&lt;/p>
&lt;p>MQTT客户端通过向代理发送为PINGREQ报文来维持与代理的连接。&lt;/p>
&lt;p>MQTT代理通过接收PINGREQ来&lt;strong>检测客户端是否无响应或断开连接&lt;/strong>，同理MQTT客户端通过接收PINGRESP响应来判断代理是否可用。&lt;/p></summary></item><item><title>MQTT遗嘱</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E9%81%97%E5%98%B1/</link><pubDate>Fri, 21 Jul 2023 23:16:21 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E9%81%97%E5%98%B1/</guid><description/><tags>传输协议 MQTT 保留消息 遗嘱 遗嘱消息 设备状态</tags><summary>&lt;p>MQTT遗嘱（Last Will and Testament, LWT），允许客户端指定一条消息，在发生意外断开连接时，代理自动发布该消息到已订阅的其他客户端。&lt;/p>
&lt;p>MQTT遗嘱 (LWT) 功能对于确保高效通信和在客户端意外断开时保持系统完整性至关重要。&lt;/p></summary></item><item><title>MQTT保留消息</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E4%BF%9D%E7%95%99%E6%B6%88%E6%81%AF/</link><pubDate>Fri, 21 Jul 2023 20:03:51 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E4%BF%9D%E7%95%99%E6%B6%88%E6%81%AF/</guid><description/><tags>传输协议 MQTT 保留消息 RetainMessage 保留标志</tags><summary>&lt;p>MQTT的保留消息可以&lt;strong>为订阅者提供指定主题上的最新状态&lt;/strong>（前提是最新消息发布时保留标志设置为true）。&lt;/p>
&lt;p>保留消息是&lt;strong>保留标志设置为true的普通MQTT消息&lt;/strong>。&lt;/p>
&lt;p>每个订阅带有保留消息的主题的客户端在&lt;strong>订阅后都会立即接收保留消息&lt;/strong>。&lt;/p>
&lt;p>当客户端向指定主题发送多条保留消息时，代理仅存储最后的保留消息以及相应的QoS级别。&lt;/p>
&lt;p>&lt;strong>代理为每个主题仅存储一条保留消息&lt;/strong>。&lt;/p></summary></item><item><title>MQTT持久会话</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E6%8C%81%E4%B9%85%E4%BC%9A%E8%AF%9D/</link><pubDate>Wed, 19 Jul 2023 23:51:14 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E6%8C%81%E4%B9%85%E4%BC%9A%E8%AF%9D/</guid><description/><tags>传输协议 MQTT 会话存在标志 SessionPresent QoS1 QoS2 会话状态 会话信息</tags><summary>&lt;p>MQTT中的持久会话允许客户端在断开连接时维护其会话状态，包括订阅的主题和未传递的消息。&lt;/p>
&lt;p>非持久会话在断开连接时丢弃会话状态，要求客户端重新连接上再次订阅主题，并可能错过在断开连接期间发布的消息。&lt;/p>
&lt;p>持久会话和非持久会话的选择取决于应用程序对会话连续性和消息持久性的要求。&lt;/p></summary></item><item><title>MQTT服务质量</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F/</link><pubDate>Tue, 18 Jul 2023 23:29:49 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F/</guid><description>MQTT的消息服务质量QoS，包含QoS0，QoS1以及QoS2，设计报文有PUBLISH、PUBACK、PUBREC、PUBCOMP等。解释了为什么QoS2会保证消息不重复并确保一次。</description><tags>传输协议 MQTT QoS 服务质量 QoS1 QoS2 QoS0</tags><summary>&lt;p>MQTT Quality of Service（QoS，服务质量）是消息发送者和接收者之间的协议，用于定义消息的传递保证级别。&lt;/p>
&lt;p>QoS具有3个级别，分别是：&lt;/p>
&lt;ol>
&lt;li>最多一次（QoS 0）&lt;/li>
&lt;li>至少一次（QoS 1）&lt;/li>
&lt;li>确定一次（QoS 2）&lt;/li>
&lt;/ol>
&lt;p>其中涉及的MQTT报文有四种，分别是PUBLISH、PUBACK、PUBREC以及PUBCOMP。&lt;/p></summary></item><item><title>MQTT主题</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E4%B8%BB%E9%A2%98/</link><pubDate>Mon, 17 Jul 2023 23:16:16 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E4%B8%BB%E9%A2%98/</guid><description/><tags>传输协议 MQTT MQTT主题 主题 Topic $SYS 通配符</tags><summary>&lt;p>MQTT主题是MQTT客户端和代理之间进行通信的关键。&lt;/p>
&lt;p>根据主题可以对消息进行有效的过滤和路由。&lt;/p>
&lt;p>与消息队列相比，MQTT主题非常轻量。&lt;/p>
&lt;p>客户端在发布或订阅所需的主题之前不需要创建该主题。代理接受每个有效的主题，而不需要事先进行任何初始化。&lt;/p></summary></item><item><title>MQTT消息传递与接收</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E4%B8%8E%E6%8E%A5%E6%94%B6/</link><pubDate>Sat, 15 Jul 2023 20:57:40 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E4%B8%8E%E6%8E%A5%E6%94%B6/</guid><description/><tags>传输协议 MQTT MQTT客户端 MQTT代理 MQTT连接 PUBLISH SUBSCRIBE SUBACK UNSUBSCRIBE UNSUBACK</tags><summary>&lt;p>MQTT客户端发布消息时使用的是PUBLISH报文，发布成功之后会接收到PUBACK报文。&lt;/p>
&lt;p>订阅时发送SUBSCRIBE报文，订阅成功会接收到SUBACK报文。&lt;/p>
&lt;p>取消订阅发送UNSUBSCIBE报文。&lt;/p></summary></item><item><title>MQTT建立连接</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/</link><pubDate>Sat, 15 Jul 2023 09:08:17 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/</guid><description/><tags>传输协议 MQTT MQTT客户端 MQTT代理 MQTT连接 CONNECT CONNACK Cleansession WillMessage</tags><summary>&lt;p>MQTT协议的两个主要组件是客户端和代理。&lt;/p>
&lt;p>MQTT客户端可以是任何运行MQTT库并通过网络连接到MQTT代理的设备。&lt;/p>
&lt;p>MQTT代理负责接收、过滤以及向已订阅的客户端发送消息，并处理客户端身份验证和授权。&lt;/p></summary></item><item><title>MQTT发布/订阅模式</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 13 Jul 2023 23:31:17 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</guid><description/><tags>传输协议 MQTT Pub/Sub 发布/订阅 主题 订阅</tags><summary>&lt;p>发布/订阅（Pub/Sub）架构提供了一种灵活的、可伸缩的方式来构建能够处理许多连接的客户端的分布式系统。&lt;/p>
&lt;p>MQTT基于发布/订阅架构，支持持久会话与服务质量QoS功能，实现了发布者与订阅者在空间、时间以及同步等方面的解耦。&lt;/p></summary></item><item><title>MQTT简介</title><link>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E7%AE%80%E4%BB%8B/</link><pubDate>Wed, 12 Jul 2023 20:10:13 +0800</pubDate><guid>https://DBL2017.github.io/post/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/mqtt/mqtt%E7%AE%80%E4%BB%8B/</guid><description/><tags>传输协议 MQTT MQTT3.1.1 MQTT5 消息模型 主题 订阅 QoS 持久会话</tags><summary>&lt;p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议）是一个&lt;strong>基于C/S架构的发布/订阅模式的消息传输协议&lt;/strong>。&lt;/p>
&lt;p>目的是&lt;strong>在带宽和连接有限的不可靠网络的环境下发送少量数据&lt;/strong>，设计思想是轻量、开放、简单并且易于实现。&lt;/p>
&lt;p>这些特性使得MQTT非常适合在受限的环境的环境中使用，比如机器对机器(M2M)通信和物联网(IoT)。&lt;/p></summary></item></channel></rss>