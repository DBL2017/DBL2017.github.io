<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程语言 on 生如夏花的博客</title><link>https://DBL2017.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><description>Recent content in 编程语言 on 生如夏花的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 11 May 2024 12:49:49 +0800</lastBuildDate><atom:link href="https://DBL2017.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml"/><item><title>struct数据对齐</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/struct%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90/</link><pubDate>Sat, 11 May 2024 12:49:49 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/struct%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90/</guid><description>结构体对齐，__attribute__((packed))，struct</description><tags>C语言</tags><summary>&lt;p>C语言结构体不同字段之间按照系统位数进行数据对齐，32位系统4字节对齐，64位系统8字节对齐。&lt;/p>
&lt;p>GCC编译器默认会进行数据对齐，但也提供了专用属性&lt;code>__attribute__((packed))&lt;/code>使结构体采用紧凑模式，不对数据进行对齐，此时&lt;code>sizeof&lt;/code>获得的大小为结构体各字段的大小。&lt;/p></summary></item><item><title>LaTex环境搭建</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/latex/latex%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Wed, 10 Aug 2022 15:55:23 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/latex/latex%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description/><tags>LaTex 环境搭建</tags><summary>&lt;p>本文主要介绍的LaTex的作用、用法、以及环境搭建。可以通过neovim+vimtex+zathuura进行编写、编译以及查看tex。&lt;/p></summary></item><item><title>Lua变量类型(三)</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</link><pubDate>Wed, 06 Jul 2022 16:33:22 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</guid><description/><tags>Lua Lua变量</tags><summary>&lt;p>Lua是动态类型语言。定义变量时不需要指定类型，可以根据变量的值来区分变量类型。&lt;/p>
&lt;p>Lua一种8中基础类型，分别是&lt;code>Nil&lt;/code>、&lt;code>Boolean&lt;/code>、&lt;code>Number&lt;/code>、&lt;code>String&lt;/code>、&lt;code>Userdata&lt;/code>、&lt;code>Function&lt;/code>、&lt;code>Thread&lt;/code>、&lt;code>Table&lt;/code>。&lt;/p>
&lt;p>函数&lt;code>type&lt;/code>可以根据变量值来获取变量的类型。&lt;/p></summary></item><item><title>Lua环境搭建和常识（二）</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%B8%B8%E8%AF%86/</link><pubDate>Wed, 06 Jul 2022 14:27:00 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%B8%B8%E8%AF%86/</guid><description/><tags>Lua Lua环境搭建</tags><summary>&lt;p>Lua开发环境的搭建以及如何执行，Lua中代码块的定义，以及如何将直接执行Lua脚本。&lt;/p></summary></item><item><title>Lua简介(一)</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E7%AE%80%E4%BB%8B/</link><pubDate>Mon, 04 Jul 2022 15:18:33 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E7%AE%80%E4%BB%8B/</guid><description/><tags>Lua Lua简介</tags><summary>&lt;p>Lua是一种强大、高效、轻量、可嵌入的脚本语言。它支持过程式编程、面向对象编程、函数式编程、数据驱动编程和数据描述。&lt;/p>
&lt;p>Lua将简单的过程语法与基于关联数组和可扩展语义的强大数据描述结构相结合。&lt;/p>
&lt;p>Lua是动态类型的，通过使用基于&lt;strong>寄存器的虚拟机&lt;/strong>解释字节码来运行，并具有自动内存管理和增量垃圾收集功能，是配置、脚本和快速原型设计的理想选择。&lt;/p></summary></item><item><title>变量作用域、存储类型以及extern关键字</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8Aextern%E5%85%B3%E9%94%AE%E5%AD%97/</link><pubDate>Tue, 17 Aug 2021 22:22:18 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8Aextern%E5%85%B3%E9%94%AE%E5%AD%97/</guid><description/><tags>C语言 作用域 Extern</tags><summary>&lt;p>本文主要介绍C语言的变量作用域、以及不同位置声明定义的变量的存储类型，extern关键字在声明函数和变量时的不同含义。&lt;/p></summary></item></channel></rss>