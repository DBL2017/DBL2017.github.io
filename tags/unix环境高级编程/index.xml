<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unix环境高级编程 on 生如夏花</title><link>https://DBL2017.github.io/tags/unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</link><description>Recent content in Unix环境高级编程 on 生如夏花</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 16 Jan 2024 23:18:13 +0800</lastBuildDate><atom:link href="https://DBL2017.github.io/tags/unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>信号集及相关函数</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E4%BF%A1%E5%8F%B7%E9%9B%86%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 16 Jan 2024 23:18:13 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E4%BF%A1%E5%8F%B7%E9%9B%86%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/</guid><description/><tags>APUE Unix 信号 Unix环境高级编程 信号集 Sigset_t</tags><summary>&lt;p>&lt;strong>信号集&lt;/strong>（&lt;code>sigset_t&lt;/code>）是表示多个信号的数据类型。&lt;/p>
&lt;p>不同的信号编号可能会超过一个整型量的位数，所以不能用整型量中的一位代表一个信号。&lt;/p>
&lt;p>POSIX.1定义数据类型&lt;code>sigset_t&lt;/code>用以表示信号集，并定义了信号的操作函数。&lt;/p></summary></item><item><title>可靠信号</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E5%8F%AF%E9%9D%A0%E4%BF%A1%E5%8F%B7/</link><pubDate>Sun, 14 Jan 2024 23:18:50 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E5%8F%AF%E9%9D%A0%E4%BF%A1%E5%8F%B7/</guid><description/><tags>APUE Unix 信号 Unix环境高级编程 可靠信号 信号递送 Kill Pause Alarm</tags><summary>&lt;p>可靠信号的处理有两个过程如下：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>信号产生&lt;/strong>：当这些事件（&lt;strong>硬件异常（如除以0）、软件条件（如alarm定时器超时）、终端产生的信号或调用&lt;code>kill&lt;/code>函数&lt;/strong>）发生时，内核会为进程产生一个信号，同时在进程表中设置一个标志。&lt;/li>
&lt;li>&lt;strong>信号递送&lt;/strong>：内核使&lt;strong>目标进程对该信号作出反应&lt;/strong>称为信号递送：或是改变目标进程的执行状态（默认动作），或是开始执行信号处理程序，或两者都是。&lt;/li>
&lt;/ol></summary></item><item><title>不可靠信号的相关问题</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E4%B8%8D%E5%8F%AF%E9%9D%A0%E4%BF%A1%E5%8F%B7%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 12 Jan 2024 21:10:43 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E4%B8%8D%E5%8F%AF%E9%9D%A0%E4%BF%A1%E5%8F%B7%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid><description/><tags>APUE Unix 信号 Unix环境高级编程 不可靠信号 信号丢失</tags><summary>&lt;p>不可靠信号指的是信号可能会丢失，不支持信号阻塞，不能控制是否重启中断的系统调用等等。&lt;/p>
&lt;p>下面是不可靠信号可能会出现的问题：&lt;/p></summary></item><item><title>信号概述</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E4%BF%A1%E5%8F%B7%E6%A6%82%E8%BF%B0/</link><pubDate>Wed, 10 Jan 2024 21:10:43 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E4%BF%A1%E5%8F%B7%E6%A6%82%E8%BF%B0/</guid><description/><tags>APUE Unix 信号 Unix环境高级编程</tags><summary>&lt;p>信号是软件中断。&lt;/p>
&lt;p>信号提供了一种处理异步事件的方法。&lt;/p>
&lt;p>信号用于大多数复杂的应用程序中。&lt;/p>
&lt;p>Unix系统的早期版本就已经提供了信号机制，但不可靠。POSIX.1对可靠信号例程进行了标准化。&lt;/p></summary></item><item><title>进程关系</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E8%BF%9B%E7%A8%8B%E5%85%B3%E7%B3%BB/</link><pubDate>Fri, 22 Jul 2022 21:11:24 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E8%BF%9B%E7%A8%8B%E5%85%B3%E7%B3%BB/</guid><description>终端简介之物理终端、模拟终端以及伪终端。终端登录以及网路登录的区别。进程组、会话以及控制终端相关概念。孤儿进程组、作业控制、终端驱动程序。fg、bg切换前后台进程。</description><tags>APUE 进程关系 终端 Unix环境高级编程</tags><summary>&lt;p>本文主要介绍了终端，包括物理终端、模拟终端以及伪终端等。&lt;/p>
&lt;p>两种不同的登录方式、即终端登录和网络登录。&lt;/p>
&lt;p>重点是进程组、会话以及控制终端之间的联系。&lt;/p>
&lt;p>最后是作业控制，作业控制是目前很多类Unix系统都支持的功能。&lt;/p>
&lt;p>介绍了shell程序是如何实现作业控制的以及shell运行程序的方式。&lt;/p></summary></item><item><title>进程控制</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</link><pubDate>Sun, 26 Jun 2022 12:53:53 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid><description/><tags>APUE Unix环境高级编程 进程控制</tags><summary>&lt;p>&lt;code>fork&lt;/code>创建子进程之后资源如何分配？&lt;/p>
&lt;p>运行中的进程的有效用户和程序文件的所属用户的区别？&lt;/p>
&lt;p>运行中的进程都有什么权限？&lt;/p>
&lt;p>函数&lt;code>system&lt;/code>是否成功执行？&lt;/p>
&lt;p>什么是进程会计？&lt;/p></summary></item><item><title>进程环境</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E8%BF%9B%E7%A8%8B%E7%8E%AF%E5%A2%83/</link><pubDate>Sat, 23 Apr 2022 16:34:51 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E8%BF%9B%E7%A8%8B%E7%8E%AF%E5%A2%83/</guid><description/><tags>APUE Unix 进程 Unix环境高级编程</tags><summary>&lt;p>进程运行时，&lt;code>main&lt;/code>函数如何被调用？&lt;/p>
&lt;p>命令行参数如何传递给进程？&lt;/p>
&lt;p>存储空间的布局以及如何分配？&lt;/p>
&lt;p>进程如何使用环境变量？&lt;/p>
&lt;p>怎么限制进程使用的资源？&lt;/p></summary></item><item><title>系统数据文件和信息</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E5%92%8C%E4%BF%A1%E6%81%AF/</link><pubDate>Tue, 05 Apr 2022 12:21:20 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E5%92%8C%E4%BF%A1%E6%81%AF/</guid><description>本文主要介绍了口令文件/etc/passwd、阴影口令/etc/shadow、组文件/etc/group等内容格式以及解析方式，还是登录账户标志wtmp、utmp以及时间(timeval_t、)、时钟CLOCK等信息。</description><tags>APUE Unix环境高级编程 阴影口令 Shadow Timeval Time_t 时钟 Group</tags><summary>&lt;p>口令文件&lt;code>/etc/passwd&lt;/code>和组文件&lt;code>/etc/group&lt;/code>经常被多个进程频繁使用。用户每次登录Linux和使用&lt;code>ls&lt;/code>命令都会访问口令文件。&lt;/p>
&lt;p>除了直接访问文件之外，系统通过一些接口来对外提供信息，比如系统标识函数、时间和日期函数。&lt;/p></summary></item><item><title>标准IO</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E6%A0%87%E5%87%86io/</link><pubDate>Wed, 23 Mar 2022 20:56:44 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E6%A0%87%E5%87%86io/</guid><description>标准IO是以流为基本对象的。</description><tags>APUE Unix 文件 标准IO Unix环境高级编程</tags><summary>&lt;p>标准I/O库由ISO C标准制定的。标准I/O库相对于系统I/O处理了很多细节，比如缓冲区分配、以优化的块大小执行I/O（这个数据存储在&lt;code>stat&lt;/code>结构体中的&lt;code>st_blksize&lt;/code>字段）等。&lt;/p>
&lt;p>系统I/O是以文件描述符来作为基础展开的，而标准I/O是围绕流进行的，打开或创建文件时会将流和文件关联起来。&lt;/p>
&lt;p>获取与流相关的文件描述符可以使用函数&lt;code>fileno()&lt;/code>。&lt;/p>
&lt;p>&lt;strong>流和文件相关联为文件流，流和内存关联起来为内存流。&lt;/strong>&lt;/p></summary></item><item><title>文件IO</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E6%96%87%E4%BB%B6io/</link><pubDate>Thu, 24 Feb 2022 22:29:11 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E6%96%87%E4%BB%B6io/</guid><description>Unix环境下的非缓冲IO</description><tags>APUE Unix 文件IO Unix环境高级编程</tags><summary>&lt;p>本节主要介绍不带缓冲的I/O（unbuffered I/O），不带缓冲指的是每个&lt;code>read&lt;/code>和&lt;code>write&lt;/code>都会调用内核中的一个系统调用。&lt;/p>
&lt;p>不带缓冲的I/O函数不是ISO C的标准函数，但是是符合POSIX的。&lt;/p>
&lt;p>原子操作在多进程之间贡献文件变得相当重要。&lt;/p>
&lt;p>主要涉及的函数有&lt;code>oepn, read, write, lseek, close; dup, fcntl, sync, fsync, ioctl&lt;/code>。&lt;/p></summary></item></channel></rss>