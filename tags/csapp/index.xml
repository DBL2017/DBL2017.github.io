<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSAPP on 生如夏花</title><link>https://DBL2017.github.io/tags/csapp/</link><description>Recent content in CSAPP on 生如夏花</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 30 May 2020 22:23:36 +0000</lastBuildDate><atom:link href="https://DBL2017.github.io/tags/csapp/index.xml" rel="self" type="application/rss+xml"/><item><title>程序的交流和通信</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BA%A4%E6%B5%81%E5%92%8C%E9%80%9A%E4%BF%A1/</link><pubDate>Sat, 30 May 2020 22:23:36 +0000</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BA%A4%E6%B5%81%E5%92%8C%E9%80%9A%E4%BF%A1/</guid><description>主要介绍系统级I/O，TCP/IP的socket通信以及进程之间的通信</description><tags>进程通信 网络编程 I/O CSAPP</tags><summary>&lt;p>下图展示了各种I/O包： 
 &lt;a data-fancybox="gallery" href="10-16.png">
 &lt;img class="mx-auto" alt="" src="10-16.png" />
 &lt;/a>
 &lt;/p></summary></item><item><title>虚拟内存</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link><pubDate>Tue, 26 May 2020 14:07:37 +0000</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid><description>虚拟内存是系统对物理内存的一种映射，进程的内存分配是基于虚拟内存的</description><tags>虚拟内存 CSAPP</tags><summary>&lt;p>一个系统中的进程与其他进程共享CPU和主存资源的。&lt;/p>
&lt;p>为了更加有效地管理内存并且少出错，现代系统提供了一种对主存的抽象概念，叫做&lt;strong>虚拟内存VM&lt;/strong>。&lt;/p>
&lt;p>虚拟内存是硬件异常，硬件地址，主存，磁盘文件和内核软件的完美交互，它为每个进程提供了一个大的，一致的和私有的地址空间。&lt;/p>
&lt;p>虚拟内存提供了三个重要的能力：&lt;/p>
&lt;ol>
&lt;li>它将主存看成是一个存储在磁盘上的地址空间的高速缓存，在主存中只保存活动区域，并根据需要在磁盘和主存之间来回传送数据，通过这种方式，它高效地使用了主存。&lt;/li>
&lt;li>它为每个进程提供了一致的地址空间，从而简化了内存管理。&lt;/li>
&lt;li>它保护了每个进程的地址空间不被其他进程破坏。&lt;/li>
&lt;/ol></summary></item><item><title>异常控制流</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</link><pubDate>Sun, 24 May 2020 14:07:37 +0000</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</guid><description>异常控制流，创建以及控制进程，信号的发送和接收</description><tags>异常 进程 地址空间 CSAPP</tags><summary>&lt;p>从给处理器加电开始，直到断电为止，程序计数器假设一个值的序列$a_0,a_1,&amp;hellip;,a_{n-1}$，其中，每个$a_k$是某个相应指令$I_k$的地址。每次从$a_k$到$a_{k+1}$的过渡称为&lt;strong>控制转移&lt;/strong>。这样的控制转移序列叫做处理器的控制流。&lt;/p></summary></item><item><title>链接</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E9%93%BE%E6%8E%A5/</link><pubDate>Sun, 17 May 2020 13:15:19 +0000</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E9%93%BE%E6%8E%A5/</guid><description>链接是将各种代码和数据片段收集并组合成一个单一文件的过程</description><tags>链接 CSAPP</tags><summary>&lt;p>&lt;strong>链接&lt;/strong>是将各种代码和数据片段收集并组合成一个单一文件的过程，这个文件可被夹在到内存中运行。链接可以执行于&lt;strong>编译&lt;/strong>时，也就是在源代码被翻译成机器代码时；也可以执行于&lt;strong>加载&lt;/strong>时，也就是在程序被&lt;strong>加载器&lt;/strong>加载到内存并执行时；甚至执行于&lt;strong>运行&lt;/strong>时，也就是由应用程序来执行。&lt;/p>
&lt;p>链接时由&lt;strong>链接器&lt;/strong>程序自动执行的。链接器在软件开发中扮演这一个关键的角色，因为它们使得&lt;strong>分离编译&lt;/strong>称为可能。&lt;/p>
&lt;p>传统静态链接，加载时共享库的动态链接，以及运行时的共享库的动态链接。&lt;/p></summary></item><item><title>存储器层次结构</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</link><pubDate>Thu, 07 May 2020 21:45:11 +0000</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</guid><description>基本存储技术(RAM、ROM以及磁盘)的简介以及存储器山</description><tags>存储器 CSAPP</tags><summary>&lt;p>&lt;strong>存储器系统&lt;/strong>是一个具有不同容量、成本和访问时间的存储设备的层次结构。CPU寄存器保存着最常用的数据。靠近CPU的小的、快速的&lt;strong>高速缓存存储器&lt;/strong>（cache memory）作为一部分存储在相对慢速的主存储器中数据和指令的缓冲区域。主存缓存存储在容量较大的、慢速磁盘上的数据，而这些磁盘通常又作为存储在通过网络连接的其他机器的存盘或磁带上的数据的缓冲区域。&lt;/p></summary></item><item><title>程序的机器级表示</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</link><pubDate>Sat, 18 Apr 2020 11:53:04 +0000</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</guid><description>机器级编码，以及AT&amp;T汇编代码的简要介绍，从C语言转换为汇编代码</description><tags>CSAPP AT&amp;T 汇编 GCC</tags><summary>&lt;p>计算机执行&lt;strong>机器代码&lt;/strong>，用字节序列编码低级的操作，包括数据处理、管理内存、读写存储设备上的数据、以及利用网络通信。编译器基于编程语言的规则、目标及其的指令集和操作系统遵循的管理，经过一系列阶段生成机器代码。GCC C语言编译器以&lt;strong>汇编代码&lt;/strong>的形式产生输出，汇编代码是机器代码的文本表示，给出程序中每一条指令。&lt;/p></summary></item><item><title>二进制加法和数值加法的对应关系</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%92%8C%E6%95%B0%E5%80%BC%E5%8A%A0%E6%B3%95%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/</link><pubDate>Sat, 18 Apr 2020 11:34:00 +0000</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%92%8C%E6%95%B0%E5%80%BC%E5%8A%A0%E6%B3%95%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/</guid><description>CS-APP中的信息的表示和处理章节的阅读笔记，可以用来回顾</description><tags>CSAPP 二进制加法 数值加法 全加器 半加器</tags><summary>&lt;h2 id="二进制加法">
 &lt;a href="#%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%8a%a0%e6%b3%95">
 二进制加法&lt;/a>
&lt;/h2>&lt;p>首先，单个位的二进制相加结果如下表所示：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">A&lt;/th>
 &lt;th style="text-align: center">B&lt;/th>
 &lt;th style="text-align: right">SUM&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">0&lt;/td>
 &lt;td style="text-align: center">0&lt;/td>
 &lt;td style="text-align: right">0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">0&lt;/td>
 &lt;td style="text-align: center">1&lt;/td>
 &lt;td style="text-align: right">1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">1&lt;/td>
 &lt;td style="text-align: center">0&lt;/td>
 &lt;td style="text-align: right">1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">1&lt;/td>
 &lt;td style="text-align: center">1&lt;/td>
 &lt;td style="text-align: right">0&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>通过这个结果表，明显可以看出这是一个单个位的&lt;strong>异或运算&lt;/strong>，所以说不考虑进位的情况下，二进制加法就是异或运算。&lt;/p></summary></item><item><title>关于IEEE754浮点数的一点思考</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E5%85%B3%E4%BA%8Eieee754%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</link><pubDate>Sat, 18 Apr 2020 11:23:50 +0000</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E5%85%B3%E4%BA%8Eieee754%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</guid><description>IEEE754定义的浮点数的详细介绍，以及自己的一些理解</description><tags>CSAPP IEEE754 浮点数</tags><summary/></item><item><title>信息的表示和处理</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/</link><pubDate>Fri, 17 Apr 2020 00:04:10 +0000</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/</guid><description>CS-APP中的信息的表示和处理章节的阅读笔记，可以用来回顾</description><tags>CSAPP 整数编码 浮点数 IEEE754</tags><summary/></item></channel></rss>