<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lua on 生如夏花</title><link>https://DBL2017.github.io/tags/lua/</link><description>Recent content in Lua on 生如夏花</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 17 Feb 2025 21:37:18 +0800</lastBuildDate><atom:link href="https://DBL2017.github.io/tags/lua/index.xml" rel="self" type="application/rss+xml"/><item><title>函数</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 17 Feb 2025 21:37:18 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/%E5%87%BD%E6%95%B0/</guid><description>从Lua语言的数据类型可以看出，函数function是一个值的类型，这个值可以赋给变量，变量名就被成为函数名，因此对函数重命名是很容易的，赋给其他变量即可。同时Lua中函数还有一点比较特别，即可以返回多个值，但是什么情况下返回多个值需要具体分析。</description><tags>Lua 函数 闭包</tags><summary>&lt;p>Lua语言中函数本质上是一个&lt;code>function&lt;/code>类型的值。这个值可以作为表达式的一部分，也可以被赋予变量。当被赋予变量时，变量名则为函数名。&lt;/p>
&lt;p>由于&lt;strong>函数是一个值&lt;/strong>，因此Lua中函数都是匿名的，所谓的&lt;strong>函数名则是保存函数值的变量&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>闭包指的是一个函数和该函数能够访问其外部作用域的局部变量的机制&lt;/strong>。&lt;/p>
&lt;p>函数和闭包的区别在于，函&lt;strong>数是没有访问外部作用域的局部变量的闭包&lt;/strong>。&lt;/p></summary></item><item><title>代码块和控制结构</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/%E4%BB%A3%E7%A0%81%E5%9D%97%E5%92%8C%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</link><pubDate>Sun, 09 Feb 2025 17:10:39 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/%E4%BB%A3%E7%A0%81%E5%9D%97%E5%92%8C%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</guid><description>`do...end`用来显式定义代码块。控制结构（`if then else end`、`while end`、`repeat until`、`for end`）也是一个代码块。`goto`语句不能跳转到局部变量作用域。</description><tags>Lua Repeat Goto</tags><summary>&lt;p>本文主要记录一下Lua语言中的代码块和控制结构。&lt;/p>
&lt;p>在交互模式中，每一行代码就是一个代码段。&lt;/p>
&lt;p>&lt;code>do...end&lt;/code>用来显式定义代码块。控制结构（&lt;code>if then else end&lt;/code>、&lt;code>while end&lt;/code>、&lt;code>repeat until&lt;/code>、&lt;code>for end&lt;/code>）也是一个代码块。&lt;/p></summary></item><item><title>Lua语言学习框架</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/</link><pubDate>Tue, 14 Jan 2025 23:35:56 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/</guid><description>学习Lua语言可以分成几个阶段，从基础语法到进阶应用，再到实际项目开发。以下是一个详细的学习框架，帮助你系统地掌握Lua语言。</description><tags>Lua</tags><summary>&lt;p>学习Lua语言可以分成几个阶段，从基础语法到进阶应用，再到实际项目开发。以下是一个详细的学习框架，帮助你系统地掌握Lua语言。&lt;/p>
&lt;p>该学习框架由百度文心一言生成，下面将根据该框架进行Lua语言的学习。&lt;/p></summary></item><item><title>Lua变量类型(三)</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</link><pubDate>Wed, 06 Jul 2022 16:33:22 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</guid><description/><tags>Lua Lua变量</tags><summary>&lt;p>Lua是动态类型语言。定义变量时不需要指定类型，可以根据变量的值来区分变量类型。&lt;/p>
&lt;p>Lua一种8中基础类型，分别是&lt;code>Nil&lt;/code>、&lt;code>Boolean&lt;/code>、&lt;code>Number&lt;/code>、&lt;code>String&lt;/code>、&lt;code>Userdata&lt;/code>、&lt;code>Function&lt;/code>、&lt;code>Thread&lt;/code>、&lt;code>Table&lt;/code>。&lt;/p>
&lt;p>函数&lt;code>type&lt;/code>可以根据变量值来获取变量的类型。&lt;/p></summary></item><item><title>Lua环境搭建和常识（二）</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%B8%B8%E8%AF%86/</link><pubDate>Wed, 06 Jul 2022 14:27:00 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%B8%B8%E8%AF%86/</guid><description/><tags>Lua Lua环境搭建</tags><summary>&lt;p>Lua开发环境的搭建以及如何执行，Lua中代码块的定义，以及如何将直接执行Lua脚本。&lt;/p></summary></item><item><title>Lua简介(一)</title><link>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E7%AE%80%E4%BB%8B/</link><pubDate>Mon, 04 Jul 2022 15:18:33 +0800</pubDate><guid>https://DBL2017.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/lua%E7%AE%80%E4%BB%8B/</guid><description/><tags>Lua Lua简介</tags><summary>&lt;p>Lua是一种强大、高效、轻量、可嵌入的脚本语言。它支持过程式编程、面向对象编程、函数式编程、数据驱动编程和数据描述。&lt;/p>
&lt;p>Lua将简单的过程语法与基于关联数组和可扩展语义的强大数据描述结构相结合。&lt;/p>
&lt;p>Lua是动态类型的，通过使用基于&lt;strong>寄存器的虚拟机&lt;/strong>解释字节码来运行，并具有自动内存管理和增量垃圾收集功能，是配置、脚本和快速原型设计的理想选择。&lt;/p></summary></item></channel></rss>