<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>线程同步 on 生如夏花的博客</title><link>https://DBL2017.github.io/tags/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</link><description>Recent content in 线程同步 on 生如夏花的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 03 Mar 2024 23:32:52 +0800</lastBuildDate><atom:link href="https://DBL2017.github.io/tags/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/index.xml" rel="self" type="application/rss+xml"/><item><title>线程同步之屏障</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E5%B1%8F%E9%9A%9C/</link><pubDate>Fri, 17 Nov 2023 20:45:04 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E5%B1%8F%E9%9A%9C/</guid><description>线程同步的另一种方式，屏障</description><tags>APUE 线程 线程同步 屏障 Pthread</tags><summary>&lt;p>屏障（barrier）是用户协调多个线程并行工作的同步机制。&lt;/p>
&lt;p>&lt;strong>屏障允许每个线程等待，直到所有的合作线程都到达某一点，然后从该点继续执行。&lt;/strong>&lt;/p>
&lt;p>&lt;code>pthread_join&lt;/code>是一种特殊的屏障，允许一个线程等待，直到另一个线程退出。&lt;/p></summary></item><item><title>线程同步之条件变量</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</link><pubDate>Sun, 22 Oct 2023 21:05:40 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</guid><description>线程同步的方式之一，条件变量</description><tags>APUE 线程 线程同步 同步 条件变量 Unix Pthread</tags><summary>&lt;p>&lt;strong>互斥量&lt;/strong>防止多个线程同时访问同一共享变量。&lt;/p>
&lt;p>&lt;strong>条件变量&lt;/strong>允许一个线程就某个&lt;strong>条件&lt;/strong>（共享变量）的变化状态通知其他线程，并让其他线程等待（阻塞于）该通知。&lt;/p>
&lt;p>&lt;strong>条件变量与互斥量一起使用，允许线程以无竞争的方式等待特定的条件发生。&lt;/strong>&lt;/p></summary></item><item><title>线程同步之读写锁</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E8%AF%BB%E5%86%99%E9%94%81/</link><pubDate>Mon, 16 Oct 2023 23:07:02 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E8%AF%BB%E5%86%99%E9%94%81/</guid><description>线程同步方式之一，读写锁</description><tags>APUE 线程 线程同步 读写锁 Unix Pthread</tags><summary>&lt;p>读写锁也称为共享互斥锁，具有3种状态：&lt;strong>读模式下的加锁状态&lt;/strong>、&lt;strong>写模式下的加锁状态&lt;/strong>、&lt;strong>不加锁状态&lt;/strong>。&lt;/p>
&lt;p>一次仅有一个线程可以占有写模式下的读写锁，但是多个线程可以同时占有读模式下的读写锁。&lt;/p>
&lt;p>读写锁非常&lt;strong>适合于对数据结构读的次数远大于写的情况&lt;/strong>。&lt;/p>
&lt;p>与互斥量相比，读写锁（reader-writer lock）运行更高的并行性。&lt;/p></summary></item><item><title>线程同步之互斥量</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E4%BA%92%E6%96%A5%E9%87%8F/</link><pubDate>Sat, 14 Oct 2023 14:29:41 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E4%BA%92%E6%96%A5%E9%87%8F/</guid><description>线程的几种同步方式，包括信号量、互斥量、读写锁、自旋锁、屏障等</description><tags>APUE Unix 线程 线程同步 互斥量 死锁 Pthread</tags><summary>&lt;p>当多个线程共享相同的内存时，需要确保每个线程看到的都是一致的数据视图。&lt;/p>
&lt;p>&lt;strong>当一个线程可以修改的变量，其他线程也可以读取或修改的时候&lt;/strong>，就需要对这些线程进行&lt;strong>同步&lt;/strong>，确保访问变量时不会得到无效的值。&lt;/p></summary></item></channel></rss>