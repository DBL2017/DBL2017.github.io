<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>进程 on 生如夏花</title><link>https://DBL2017.github.io/tags/%E8%BF%9B%E7%A8%8B/</link><description>Recent content in 进程 on 生如夏花</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 30 Mar 2024 22:26:53 +0800</lastBuildDate><atom:link href="https://DBL2017.github.io/tags/%E8%BF%9B%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>守护进程</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</link><pubDate>Sat, 30 Mar 2024 22:26:53 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</guid><description>守护进程（dameon）控制终端，会话首进程，孤儿进程组，后台进程。编写守护进程（daemonize）的7个步骤（umask，fork，setsid，/dev/null），基于文件记录锁的单实例守护进程</description><tags>进程 守护进程 后台进程 出错管理</tags><summary>&lt;p>守护进程是生存期长的一种进程，在系统引导装入时启动，在系统关闭时终止。&lt;/p>
&lt;p>守护进程没有控制终端，通常在后台运行，实际上是在后台的孤儿进程组中运行。&lt;/p>
&lt;p>没有控制终端的原因在于&lt;strong>不与用户交互，避免终端信号影响&lt;/strong>。&lt;/p>
&lt;p>在孤儿进程组中运行的原因在于&lt;strong>防止其获取控制终端（通过每次打开终端设备设置参数&lt;code>O_NOCTTY&lt;/code>的方式不太靠谱）&lt;/strong>。&lt;/p></summary></item><item><title>进程环境</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E8%BF%9B%E7%A8%8B%E7%8E%AF%E5%A2%83/</link><pubDate>Sat, 23 Apr 2022 16:34:51 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E8%BF%9B%E7%A8%8B%E7%8E%AF%E5%A2%83/</guid><description/><tags>APUE Unix 进程 Unix环境高级编程</tags><summary>&lt;p>进程运行时，&lt;code>main&lt;/code>函数如何被调用？&lt;/p>
&lt;p>命令行参数如何传递给进程？&lt;/p>
&lt;p>存储空间的布局以及如何分配？&lt;/p>
&lt;p>进程如何使用环境变量？&lt;/p>
&lt;p>怎么限制进程使用的资源？&lt;/p></summary></item><item><title>异常控制流</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</link><pubDate>Sun, 24 May 2020 14:07:37 +0000</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/csapp/%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</guid><description>异常控制流，创建以及控制进程，信号的发送和接收</description><tags>异常 进程 地址空间 CSAPP</tags><summary>&lt;p>从给处理器加电开始，直到断电为止，程序计数器假设一个值的序列$a_0,a_1,&amp;hellip;,a_{n-1}$，其中，每个$a_k$是某个相应指令$I_k$的地址。每次从$a_k$到$a_{k+1}$的过渡称为&lt;strong>控制转移&lt;/strong>。这样的控制转移序列叫做处理器的控制流。&lt;/p></summary></item></channel></rss>