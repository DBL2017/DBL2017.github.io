<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>文件IO on 生如夏花的博客</title><link>https://DBL2017.github.io/tags/%E6%96%87%E4%BB%B6io/</link><description>Recent content in 文件IO on 生如夏花的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 04 Aug 2024 10:26:27 +0800</lastBuildDate><atom:link href="https://DBL2017.github.io/tags/%E6%96%87%E4%BB%B6io/index.xml" rel="self" type="application/rss+xml"/><item><title>I/O多路转接之poll函数</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/io%E5%A4%9A%E8%B7%AF%E8%BD%AC%E6%8E%A5%E4%B9%8Bpoll%E5%87%BD%E6%95%B0/</link><pubDate>Sun, 04 Aug 2024 10:26:27 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/io%E5%A4%9A%E8%B7%AF%E8%BD%AC%E6%8E%A5%E4%B9%8Bpoll%E5%87%BD%E6%95%B0/</guid><description>poll函数是另一种支持I/O多路复用的技术。其和select的区别在于selec是基于事件类型来划分文件描述符，而poll则是针对每个文件描述来指定关注的事件。同时poll函数支持更多的事件类型，以及文件描述符数量仅受系统性能限制。因此poll可以看作是select的一大进步。</description><tags>文件IO I/O 多路转接 Poll</tags><summary>&lt;p>如上节所述，&lt;code>poll&lt;/code>函数是另一个支持I/O多路转接的函数。&lt;/p>
&lt;p>与&lt;code>select&lt;/code>不同的是&lt;code>poll&lt;/code>函数支持更多的条件，而非&lt;code>select&lt;/code>函数仅有的三种条件（可读、可写以及异常）。&lt;/p>
&lt;p>同时&lt;code>poll&lt;/code>函数是以&lt;code>struct pollfd&lt;/code>数组类型保存文件描述符（没有文件描述符的数量限制），并为每个文件描述符指定关注的哪些条件，而&lt;code>select&lt;/code>函数则是另一种角度，为每个条件设置哪些文件描述符。&lt;/p></summary></item><item><title>文件IO</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E6%96%87%E4%BB%B6io/</link><pubDate>Thu, 24 Feb 2022 22:29:11 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E6%96%87%E4%BB%B6io/</guid><description>Unix环境下的非缓冲IO</description><tags>APUE Unix 文件IO Unix环境高级编程</tags><summary>&lt;p>本节主要介绍不带缓冲的I/O（unbuffered I/O），不带缓冲指的是每个&lt;code>read&lt;/code>和&lt;code>write&lt;/code>都会调用内核中的一个系统调用。&lt;/p>
&lt;p>不带缓冲的I/O函数不是ISO C的标准函数，但是是符合POSIX的。&lt;/p>
&lt;p>原子操作在多进程之间贡献文件变得相当重要。&lt;/p>
&lt;p>主要涉及的函数有&lt;code>oepn, read, write, lseek, close; dup, fcntl, sync, fsync, ioctl&lt;/code>。&lt;/p></summary></item></channel></rss>