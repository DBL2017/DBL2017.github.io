<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fcntl on 生如夏花的博客</title><link>https://DBL2017.github.io/tags/fcntl/</link><description>Recent content in Fcntl on 生如夏花的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 26 Jun 2024 11:20:10 +0800</lastBuildDate><atom:link href="https://DBL2017.github.io/tags/fcntl/index.xml" rel="self" type="application/rss+xml"/><item><title>文件锁之fcntl</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E6%96%87%E4%BB%B6%E9%94%81%E4%B9%8Bfcntl/</link><pubDate>Thu, 18 Apr 2024 20:07:19 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E6%96%87%E4%BB%B6%E9%94%81%E4%B9%8Bfcntl/</guid><description>文件锁、fcntl、读写锁、F_SETLK、F_GETLK、F_SETLKW、F_RDLCK、F_WRLCK、F_UNLCK、死锁、TELL_WAIT、锁的继承与释放</description><tags>APUE 建议性锁 强制性锁 文件锁 记录锁 Fcntl</tags><summary>&lt;p>文件锁的作用：当第一个进程正在读或修改文件的某个部分时，使用文件锁可以阻止其他进程修改文件的相同部分。&lt;/p>
&lt;p>因此文件锁可用于多个进程之间进行同步，防止进程间的竞争状态。&lt;/p>
&lt;p>Linux系统支持两组给文件加锁的不同API，分别是&lt;code>fcntl&lt;/code>与&lt;code>flock&lt;/code>。本节主要记录&lt;code>fcntl&lt;/code>的实现原理以及使用方式。&lt;/p>
&lt;p>&lt;strong>任意多个进程在同一个给定字节上都可以有一把共享读锁，但一个给定字节上仅能有一个进程持有一把独占写锁&lt;/strong>。&lt;/p></summary></item><item><title>非阻塞IO</title><link>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E9%9D%9E%E9%98%BB%E5%A1%9Eio/</link><pubDate>Wed, 17 Apr 2024 18:39:49 +0800</pubDate><guid>https://DBL2017.github.io/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/apue/%E9%9D%9E%E9%98%BB%E5%A1%9Eio/</guid><description>系统调用、低速系统调用、非阻塞IO、O_NONBLOCK、fcntl</description><tags>APUE 非阻塞I/O 低速系统调用 O_NONBLOCK Fcntl</tags><summary>&lt;p>系统调用分为两类，“低速”系统调用和其他。&lt;/p>
&lt;p>“低速”系统调用指的是&lt;strong>可能会使进程永远阻塞&lt;/strong>的一类系统调用。&lt;/p>
&lt;p>非阻塞I/O则指的是当进行诸如&lt;code>open, read, write&lt;/code>等I/O操作时，这些操作&lt;strong>不会永远阻塞&lt;/strong>。&lt;strong>如果操作不能完成，则调用立即出错返回，以表示继续该操作将会阻塞&lt;/strong>。&lt;/p>
&lt;p>一般非阻塞I/O需要不断轮询判断是否有数据要进行读写，这种情况是比较浪费CPU时间的。&lt;strong>避免非阻塞I/O的两种方式：I/O多路转接或多线程采用阻塞I/O&lt;/strong>。&lt;/p></summary></item></channel></rss>